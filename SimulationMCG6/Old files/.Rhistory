# px probability of having outlier in component x_ij in X
# mec shift in the mean of component epsilon_ij
# mbc2 shift in the mean of random effect b2
# alphac multiplication factor in component x_ij in X
scenarios=NULL
scenarios=rbind(scenarios,c(nrep,200,4,pe,0,0,-80,0,1))
scenarios=rbind(scenarios,c(nrep,200,4,0,pb,0,0,-25,1))
scenarios=rbind(scenarios,c(nrep,200,4,0,0,px,0,0,10))
colnames(scenarios)=c("nrep","n","k","pe","pb","px","mec","mbc2","alphac")
scenarios=data.frame(scenarios)
set.seed(11131957)
for (i in (1:nrow(scenarios))){
nrep=scenarios[i,1]
nsample=scenarios[i,2]
ksample=scenarios[i,3]
pesample=scenarios[i,4]
pbsample=scenarios[i,5]
pxsample=scenarios[i,6]
mecsample=scenarios[i,7]
mbc2sample=scenarios[i,8]
alphacsample=scenarios[i,9]
MLESMMcTAU=MLESMMcTAU_estimates_MCG(nrep=nrep,n=nsample,k=ksample,
pe=pesample,pb=pbsample,px=pxsample,
mec=mecsample,mbc2=mbc2sample,
alphac=alphacsample)
if (pe>0){
flname=paste0("./Results_Epsilon_contamination/","MLESMMcTAU","_",
"nrep=",nrep,"_",
"n=",nsample,"_",
"k=",ksample,"_",
"pe=",pesample,"_",
"pb=",pbsample,"_",
"px=",pxsample,"_",
"mec=",mecsample,"_",
"mbc2=",mbc2sample,"_",
"alphac=",alphacsample,"_",
".RData")}else{
flname=paste0("./Results_Uncontaminated/","MLESMMcTAU","_",
"nrep=",nrep,"_",
"n=",nsample,"_",
"k=",ksample,"_",
"pe=",pesample,"_",
"pb=",pbsample,"_",
"px=",pxsample,"_",
"mec=",mecsample,"_",
"mbc2=",mbc2sample,"_",
"alphac=",alphacsample,"_",
".RData")}
if (pb>0){
flname=paste0("./Results_Random_Effect_contamination/","MLESMMcTAU","_",
"nrep=",nrep,"_",
"n=",nsample,"_",
"k=",ksample,"_",
"pe=",pesample,"_",
"pb=",pbsample,"_",
"px=",pxsample,"_",
"mec=",mecsample,"_",
"mbc2=",mbc2sample,"_",
"alphac=",alphacsample,"_",
".RData")}
if (px>0){
flname=paste0("./Results_X_contamination/","MLESMMcTAU","_",
"nrep=",nrep,"_",
"n=",nsample,"_",
"k=",ksample,"_",
"pe=",pesample,"_",
"pb=",pbsample,"_",
"px=",pxsample,"_",
"mec=",mecsample,"_",
"mbc2=",mbc2sample,"_",
"alphac=",alphacsample,"_",
".RData")}
save(MLESMMcTAU,file=flname)
}
setwd("C:/Users/rlopuhaa/surfdrive/LOPUHAA/Research/Toulouse/Visit 2023 Februari/Rstuff Februari 2023/Simulation MCG")
setwd("C:/Users/rlopuhaa/surfdrive/LOPUHAA/Research/Toulouse/Visit 2023 Februari/Rstuff Februari 2023/Simulation MCG")
source("biweight_functions.R")
source("asympt_norm_constants.R")
source("function_data_gen_MCG.R")
source("Robust_lme.R")
source("function_MLESMMcTAU_estimates_MCG.R")
library(robustbase)
library(lava)
# Information for ourselves
# beta=c(250,10)
# beta1=gamma0
# beta2=gamma1
# theta=c(790,-8.5,40,400)
# theta1=sigma0^2
# theta2=sigma10
# theta3=sigma1^2
# theta4=sigmaeps^2
pe=0.05
pb=0.05
px=0.05
nrep=1
# creating a dataframe that contains different contamination schemes as rows:
# n number of individuals
# k number of observations per individual
# pe probability of having outlier in component epsilon_ij
# pb probability of having outlier in vector of random effects b
# px probability of having outlier in component x_ij in X
# mec shift in the mean of component epsilon_ij
# mbc2 shift in the mean of random effect b2
# alphac multiplication factor in component x_ij in X
scenarios=NULL
scenarios=rbind(scenarios,c(nrep,200,4,pe,0,0,-80,0,1))
scenarios=rbind(scenarios,c(nrep,200,4,0,pb,0,0,-25,1))
scenarios=rbind(scenarios,c(nrep,200,4,0,0,px,0,0,10))
colnames(scenarios)=c("nrep","n","k","pe","pb","px","mec","mbc2","alphac")
scenarios=data.frame(scenarios)
set.seed(11131957)
for (i in (1:nrow(scenarios))){
nrep=scenarios[i,1]
nsample=scenarios[i,2]
ksample=scenarios[i,3]
pesample=scenarios[i,4]
pbsample=scenarios[i,5]
pxsample=scenarios[i,6]
mecsample=scenarios[i,7]
mbc2sample=scenarios[i,8]
alphacsample=scenarios[i,9]
MLESMMcTAU=MLESMMcTAU_estimates_MCG(nrep=nrep,n=nsample,k=ksample,
pe=pesample,pb=pbsample,px=pxsample,
mec=mecsample,mbc2=mbc2sample,
alphac=alphacsample)
if (pe>0){
flname=paste0("./Results_Epsilon_contamination/","MLESMMcTAU","_",
"nrep=",nrep,"_",
"n=",nsample,"_",
"k=",ksample,"_",
"pe=",pesample,"_",
"pb=",pbsample,"_",
"px=",pxsample,"_",
"mec=",mecsample,"_",
"mbc2=",mbc2sample,"_",
"alphac=",alphacsample,"_",
".RData")}else{
flname=paste0("./Results_Uncontaminated/","MLESMMcTAU","_",
"nrep=",nrep,"_",
"n=",nsample,"_",
"k=",ksample,"_",
"pe=",pesample,"_",
"pb=",pbsample,"_",
"px=",pxsample,"_",
"mec=",mecsample,"_",
"mbc2=",mbc2sample,"_",
"alphac=",alphacsample,"_",
".RData")}
if (pb>0){
flname=paste0("./Results_Random_Effect_contamination/","MLESMMcTAU","_",
"nrep=",nrep,"_",
"n=",nsample,"_",
"k=",ksample,"_",
"pe=",pesample,"_",
"pb=",pbsample,"_",
"px=",pxsample,"_",
"mec=",mecsample,"_",
"mbc2=",mbc2sample,"_",
"alphac=",alphacsample,"_",
".RData")}
if (px>0){
flname=paste0("./Results_X_contamination/","MLESMMcTAU","_",
"nrep=",nrep,"_",
"n=",nsample,"_",
"k=",ksample,"_",
"pe=",pesample,"_",
"pb=",pbsample,"_",
"px=",pxsample,"_",
"mec=",mecsample,"_",
"mbc2=",mbc2sample,"_",
"alphac=",alphacsample,"_",
".RData")}
save(MLESMMcTAU,file=flname)
}
paste0("./Results_Random_Effect_contamination/","MLESMMcTAU","_",
"nrep=",nrep,"_",
"n=",nsample,"_",
"k=",ksample,"_",
"pe=",pesample,"_",
"pb=",pbsample,"_",
"px=",pxsample,"_",
"mec=",mecsample,"_",
"mbc2=",mbc2sample,"_",
"alphac=",alphacsample,"_",
".RData")
paste0("./Results_Epsilon_contamination/","MLESMMcTAU","_",
"nrep=",nrep,"_",
"n=",nsample,"_",
"k=",ksample,"_",
"pe=",pesample,"_",
"pb=",pbsample,"_",
"px=",pxsample,"_",
"mec=",mecsample,"_",
"mbc2=",mbc2sample,"_",
"alphac=",alphacsample,"_",
".RData")
scenarios
10000/60
# This script prepares the setting for the simulation for
# the MLE, S, MM, and cTAU estimators
# It sources the required R-scripts.
#
# The user first specifies the contamination scenarios.
# The script runs the simulation for these scenarios using
# the function MLESMMcTAU_estimates_MCG and data_gen_MCR
#
# After the simulation for a scenario has been completed
# this script saves the results in .RData files
# containing a list MLESMMcTAU
# The .Rdata files are stored in designated subfolders
# BEFORE running this script, first create subfolders
# - Results_Uncontaminated
# - Results_Epsilon_contamination
# - Results_Random_Effect_contamination
# - Results_X_contamination
source("biweight_functions.R")
source("asympt_norm_constants.R")
source("function_data_gen_MCG.R")
source("Robust_lme.R")
source("function_MLESMMcTAU_estimates_MCG.R")
library(robustbase)
library(lava)
# Information for ourselves
# beta=c(250,10)
# beta1=gamma0
# beta2=gamma1
# theta=c(790,-8.5,40,400)
# theta1=sigma0^2
# theta2=sigma10
# theta3=sigma1^2
# theta4=sigmaeps^2
pe=0.05
pb=0.05
px=0.05
nrep=1
# creating a dataframe that contains different contamination schemes as rows:
# n number of individuals
# k number of observations per individual
# pe probability of having outlier in component epsilon_ij
# pb probability of having outlier in vector of random effects b
# px probability of having outlier in component x_ij in X
# mec shift in the mean of component epsilon_ij
# mbc2 shift in the mean of random effect b2
# alphac multiplication factor in component x_ij in X
scenarios=NULL
scenarios=rbind(scenarios,c(nrep,200,4,pe,0,0,-80,0,1))
scenarios=rbind(scenarios,c(nrep,200,4,0,pb,0,0,-25,1))
scenarios=rbind(scenarios,c(nrep,200,4,0,0,px,0,0,10))
colnames(scenarios)=c("nrep","n","k","pe","pb","px","mec","mbc2","alphac")
scenarios=data.frame(scenarios)
set.seed(11131957)
for (i in (1:nrow(scenarios))){
nrep=scenarios[i,1]
nsample=scenarios[i,2]
ksample=scenarios[i,3]
pesample=scenarios[i,4]
pbsample=scenarios[i,5]
pxsample=scenarios[i,6]
mecsample=scenarios[i,7]
mbc2sample=scenarios[i,8]
alphacsample=scenarios[i,9]
MLESMMcTAU=MLESMMcTAU_estimates_MCG(nrep=nrep,n=nsample,k=ksample,
pe=pesample,pb=pbsample,px=pxsample,
mec=mecsample,mbc2=mbc2sample,
alphac=alphacsample)
if (pesample>0){
flname=paste0("./Results_Epsilon_contamination/","MLESMMcTAU","_",
"nrep=",nrep,"_",
"n=",nsample,"_",
"k=",ksample,"_",
"pe=",pesample,"_",
"pb=",pbsample,"_",
"px=",pxsample,"_",
"mec=",mecsample,"_",
"mbc2=",mbc2sample,"_",
"alphac=",alphacsample,"_",
".RData")}else{
flname=paste0("./Results_Uncontaminated/","MLESMMcTAU","_",
"nrep=",nrep,"_",
"n=",nsample,"_",
"k=",ksample,"_",
"pe=",pesample,"_",
"pb=",pbsample,"_",
"px=",pxsample,"_",
"mec=",mecsample,"_",
"mbc2=",mbc2sample,"_",
"alphac=",alphacsample,"_",
".RData")}
if (pbsample>0){
flname=paste0("./Results_Random_Effect_contamination/","MLESMMcTAU","_",
"nrep=",nrep,"_",
"n=",nsample,"_",
"k=",ksample,"_",
"pe=",pesample,"_",
"pb=",pbsample,"_",
"px=",pxsample,"_",
"mec=",mecsample,"_",
"mbc2=",mbc2sample,"_",
"alphac=",alphacsample,"_",
".RData")}
if (pxsample>0){
flname=paste0("./Results_X_contamination/","MLESMMcTAU","_",
"nrep=",nrep,"_",
"n=",nsample,"_",
"k=",ksample,"_",
"pe=",pesample,"_",
"pb=",pbsample,"_",
"px=",pxsample,"_",
"mec=",mecsample,"_",
"mbc2=",mbc2sample,"_",
"alphac=",alphacsample,"_",
".RData")}
save(MLESMMcTAU,file=flname)
}
# This script contains the code for the function data_gen_MCG.
# This function generates a single dataset according to the model
# in Mason, Cantoni & Ghisletta (2021) with contamination
# generated according to the ICM (independent contamination model
# or cellwise contamination) in the measurement error and
# according to CCM (central contamination model) in the random effects.
# In addition, the function also generates contamination
# in the design matrix of the fixed effects according to ICM.
library(mvtnorm)    # needed for rmvnorm to generate
# a vector of random effects
data_gen_MCG = function(n=200,k=4,pe=0,pb=0,px=0,mec=0,mbc2=0,alphac=1){
# n number of individuals
# k number of observations per individual
# pe probability of having outlier in component epsilon_ij
# pb probability of having outlier in vector of random effects b
# px probability of having outlier in component x_ij in X
# mec shift in the mean of component epsilon_ij
# mbc2 shift in the mean of random effect b2
# alphac multiplication factor in component x_ij in X
X = list()          # list of design matrices for each individual
x1 = rep(1,k)       # first column of design matrix X
x2 = seq(0,k-1,1)   # second column of design matrix X
Zmat = cbind(x1,x2) # design matrix Z of vector of random effects
Z=list(Zmat)        # Creating list for Roblme
# preparing X-list for Roblme
for (i in (1:n)){
X[[i]] <- cbind(x1,x2)
}
# Setting up linear representation of V
Sigma1=matrix(c(1,0,0,0),ncol=2)  # corresponds to var(b1)
Sigma2=matrix(c(0,1,1,0),ncol=2)  # corresponds to covar(b1,b2)
Sigma3=matrix(c(0,0,0,1),ncol=2)  # corresponds to var(b2)
L1=Zmat%*%Sigma1%*%t(Zmat)          # term in V from var(b1)
L2=Zmat%*%Sigma2%*%t(Zmat)          # term in V from covar(b1,b2)
L3=Zmat%*%Sigma3%*%t(Zmat)          # term in V from var(b21)
L4=diag(1,k)                        # term in V from var(epsilon)
# preparing L-list for Roblme
Llist=list()
Llist[[1]]=L1
Llist[[2]]=L2
Llist[[3]]=L3
Llist[[4]]=L4
Y = list()  # preparing Y-list containing individual observations
sb0 = matrix(c(790,-8.5,-8.5,40),2,2)       # var of random effect b
se0=20                                      # sd of eps_ij
mbc = c(0,mbc2)                             # contamination in mean of b
sbc =  matrix(c(7.9,-0.085,-0.085,0.4),2,2) # contamination in var of b
sec = 0.5                                   # contamination sd of eps_ij
# counters for number of contaminated observations/individuals
nobi=0
noe=0
nox=0
noei=0
noxi=0
for (i in (1:n)){
noeitemp=0
noxitemp=0
# generating a random effect
if (runif(1) <= (1-pb)){b= rmvnorm(1, mean=rep(0,2), sigma=sb0)}
else{b=rmvnorm(1, mean=mbc, sigma=sbc);nobi=nobi+1}
# generating measurement error
eps = numeric(k)
# generating components of measurement error
for (kk in (1:k)){
if (runif(1) <= (1-pe)){eps[kk] = rnorm(1, mean=0, sd=se0)}
else{eps[kk] = rnorm(1, mean=mec, sd=sec);noe=noe+1;noeitemp=1}
}
beta0 = c(250,10)  # fixed effects
# construct Y[[i]] according to MCG-model
Y[[i]] =  X[[i]]%*%beta0 + Z[[1]]%*%as.vector(b) + eps
# constructing components of x2 under contamination
for (r in (1:k)){
if(runif(1) <= (1-px)){ X[[i]][r,2]= X[[i]][r,2]}
else{X[[i]][r,2]= alphac*X[[i]][r,2];nox=nox+1;noxitemp=1}
}
# keeping track of number of outliers
noei = noei + noeitemp
noxi = noxi + noxitemp
}
# Setting up Y-matrix for Roblme
Ymat=matrix(0,n,k)
for (i in (1:n)){Ymat[i,] = Y[[i]]}
return(list(Y=Ymat,X=X,Z=Z,L=Llist,
pe=pe,pb=pb,px=px,
mec=mec,mbc2=mbc2,alphac=alphac,
noei=noei,noe=noe,nobi=nobi,noxi=noxi,nox=nox))
}
source("C:/Users/rlopuhaa/surfdrive/LOPUHAA/Research/Toulouse/Visit 2023 Februari/Rstuff Februari 2023/Simulation MCG/function_data_gen_MCG_contCCM.R", echo=TRUE)
source("C:/Users/rlopuhaa/surfdrive/LOPUHAA/Research/Toulouse/Visit 2023 Februari/Rstuff Februari 2023/Simulation MCG/Robust_lme.R", echo=TRUE)
source("C:/Users/rlopuhaa/surfdrive/LOPUHAA/Research/Toulouse/Visit 2023 Februari/Rstuff Februari 2023/Simulation MCG/function_MLESMM_estimates_MCG.R", echo=TRUE)
source("C:/Users/rlopuhaa/surfdrive/LOPUHAA/Research/Toulouse/Visit 2023 Februari/Rstuff Februari 2023/Simulation MCG/function_MLESMMcTAU_estimates_MCG.R", echo=TRUE)
source("C:/Users/rlopuhaa/surfdrive/LOPUHAA/Research/Toulouse/Visit 2023 Februari/Rstuff Februari 2023/Simulation MCG/function_MLESMMcTAU_estimates_MCG_contCCM.R", echo=TRUE)
source("C:/Users/rlopuhaa/surfdrive/LOPUHAA/Research/Toulouse/Visit 2023 Februari/Rstuff Februari 2023/Simulation MCG/function_MLESMMcTAU_estimates_MCG_contCCM.R", echo=TRUE)
# This script uses the contamination scenarios and results of
# the corresponding simulation performed by
# Simulation_setting_model_MCG.R
# The script extracts the information from the .RData files
# corresponding to the different setups in dataframe
# scenarios_boxplot and produces boxplots of the estimators
#######################################################################
# creating dataframe containing different contamination schemes as rows
# SCENARIO 1: - -80 fixed
#             - pe 0, 0.01, ... , 0.10
#             - 250 repetitions
pevec=seq(0,0.10,by=0.01)
nrep=250
scenarios_boxplot=NULL
for (i in 1:length(pevec)){
scenarios_boxplot=rbind(scenarios_boxplot,c(nrep,200,4,pevec[i],0,0,-80,0,1))
}
colnames(scenarios_boxplot)=c("nrep","n","k","pe","pb","px","mec","mbc2","alphac")
# Sets scenarios equal to scenarios_boxplot
# scenarios is used below to extract the .RData files
scenarios=data.frame(scenarios_boxplot)
#######################################################
# Extracting the information for beta from .Rdata files
# Dataframes for betahat, thetahat, and number of outliers
boxplotMLESMMbeta=NULL
boxplotMLESMMtheta=NULL
boxplotMLESMM_outlier=NULL
for (i in 1:nrow(scenarios)){
if (scenarios$pe[i]>0){
#    flname=paste0("./Results_Epsilon_contamination/","MLESMM","_",
flname=paste0("./Results_Epsilon_contamination/EpsilonCCM/","MLESMM","_",
"nrep=",scenarios$nrep[i],"_",
"n=",scenarios$n[i],"_",
"k=",scenarios$k[i],"_",
"pe=",scenarios$pe[i],"_",
"pb=",scenarios$pb[i],"_",
"px=",scenarios$px[i],"_",
"mec=",scenarios$mec[i],"_",
"mbc2=",scenarios$mbc2[i],"_",
"alphac=",scenarios$alphac[i],".RData")}else{
flname=paste0("./Results_Uncontaminated/","MLESMM","_",
"nrep=",scenarios$nrep[i],"_",
"n=",scenarios$n[i],"_",
"k=",scenarios$k[i],"_",
"pe=",scenarios$pe[i],"_",
"pb=",scenarios$pb[i],"_",
"px=",scenarios$px[i],"_",
"mec=",scenarios$mec[i],"_",
"mbc2=",scenarios$mbc2[i],"_",
"alphac=",scenarios$alphac[i],".RData")}
load(flname)
# combining the extracted information for boxplots
# for estimators for beta in a dataframe
# dataframe for MLE beta
boxplotMLEbeta=cbind(rep(1,times=nrep),
rep(scenarios$pe[i],times=nrep),
MLESMM$MLE$beta)
# dataframe for S beta
boxplotSbeta=cbind(rep(2,times=nrep),
rep(scenarios$pe[i],times=nrep),
MLESMM$S$beta)
# dataframe for MM beta
boxplotMMbeta=cbind(rep(3,times=nrep),
rep(scenarios$pe[i],times=nrep),
MLESMM$MM$beta)
# Combining all dataframes for beta in one.
# This dataframe can be uses as input for
# classical boxplots or ggplot2
boxplotMLESMMbeta=rbind(boxplotMLESMMbeta,
boxplotMLEbeta,
boxplotSbeta,boxplotMMbeta)
# dataframe for MLE theta
boxplotMLEtheta=cbind(rep(1,times=nrep),
rep(scenarios$pe[i],times=nrep),
MLESMM$MLE$theta)
# dataframe for S theta
boxplotStheta=cbind(rep(2,times=nrep),
rep(scenarios$pe[i],times=nrep),
MLESMM$S$theta)
# Combining all dataframes for theta in one.
# This dataframe can be uses as input for
# classical boxplots or ggplot2
boxplotMLESMMtheta=rbind(boxplotMLESMMtheta,
boxplotMLEtheta,
boxplotStheta)
# dataframe for number of outliers in i-th scenario
boxplotMLESMM_outlier_tmp=cbind(rep(n,nrep),
rep(scenarios$pe[i],times=nrep),
MLESMM$no_outliers)
# Combining with dataframes of previous scenarios
boxplotMLESMM_outlier=rbind(boxplotMLESMM_outlier,
boxplotMLESMM_outlier_tmp)
} # END of scenarios loop
?covMCD
library(robustbase) # needed for covMcd
?covMCD
eps
rep(1,k)
k=4
rep(1,k)
seq(0,k-1,1)
?sleepstudy
??sleepstudy
??sleepstudy
