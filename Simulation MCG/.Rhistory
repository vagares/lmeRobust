#attr(RES, "center") <- MEANS
#attr(RES, "transform") <- TRANS
#attr(RES, "backtransform") <- diag(SIGMAs) %*% t(SVD$v)
# attr(RES, "SingularValues") <- SV
RES
}
##############################################################################
# Preparing the values at entry
n=100 # number of observations
k=4   # dimension of each observation
# Setting breakdown point and cut-off constant for Tukey's biweight
r=0.5
c0=rhoconst(k,r,0.01,100)
b0=expecrho(k,c0)
# settings of variance parameter and fixed effects
sigmaeps=1  # variance of error
sigmabeta=1 # variance of random effects
alpha1=1    # fixed effect 1
alpha2=1    # fixed effect 2
fixeff=c(alpha1,alpha2)     # vector of fixed effects parameters
theta=c(sigmabeta,sigmaeps) # vector of covariance parameters
# random settings
set.seed(123)
# Diagonal variances of measurement covariance
#varerror=diag(rep(1,4))   # setting in Copt & Victoria-Feser (2006)
# THIS SETTING GIVES DIFFERENCES IN COVARIANCE OF THETAHAT
# BUT ITERATIONS RUN OUT OF BOUNDS
#varerror=diag(runif(k))
varerror=diag(c(1,4,9,16))
#varerror=cbind(c(1,r,r^2,r^3),c(r,1,r,r^2),c(r^2,r,1,r),c(r^3,r^2,r,1))
# construction design matrix X=[1 x], such that X^TX=4*I
X=cbind(1,rnorm(k))
X=cbind(1,data_sphe(X)) # setting in Copt & Victoria-Feser (2006)
#X=as.matrix(cbind(1:4,rnorm(4)))
# Setting for design matrix random effects
Z=rep(1,times=k)   # setting in Copt & Victoria-Feser (2006)
#Z=1:4               # THIS SETTING GIVES DIFFERENCES IN COVRIANCE OF BETAHAT
# matrices L in V=sigmabeta*L1+sigmaeps*L2
L1=Z%*%t(Z)       # covariance part due to random effect
L2=varerror       # covariance part due to measurement error
Vtheta=theta[1]*L1+theta[2]*L2
L=as.matrix(cbind(vec(L1),vec(L2)))
Llist=list()
Llist[[1]]=L1
Llist[[2]]=L2
# Asymptotic variances betahat
# Expression from our theory
varbeta=constbetahat(k,c0)*
solve(t(X)%*%solve(Vtheta)%*%X)
# Expression from Copt & Victoria-Feser (2006)
varbetaCopt=constbetahat(k,c0)*
solve(t(X)%*%X) %*% t(X) %*% Vtheta %*% X %*% solve(t(X)%*%X)
# Asymptotic variances thetahat
# Expression from our theory
vartheta=(2*sigma1(k,c0)*
solve(t(L)%*%(solve(Vtheta)%x%solve(Vtheta))%*%L)+
sigma2(k,c0)*theta%*%t(theta))
# Expression from Copt & Victoria-Feser (2006)
varthetaCopt=2*sigma1(k,c0)*
solve((t(L)%*%L))%*%t(L)%*%(Vtheta%x%Vtheta)%*%L%*%solve((t(L)%*%L))+
sigma2(k,c0)*theta%*%t(theta)
###################################################################
# setting up iterations for the simulation
nrep=10000
betahat=matrix(0,nrow=nrep,ncol = length(fixeff))   # matrix for nrep rows of betahat's with biweight
thetahat=matrix(0,nrow=nrep,ncol = length(theta))   # matrix for nrep rows of thetahat's with biweight
MDscale=matrix(0,nrow=nrep,ncol = 1)                # vector for nrep values of scaling
MDscalenew=matrix(0,nrow=nrep,ncol = 1)                # vector for nrep values of scaling
betahatmatS=matrix(0,nrow=nrep,ncol=length(fixeff))
thetahatmatS=matrix(0,nrow=nrep,ncol=length(theta))
asympvarbetaS=list()
asympvarthetaS=list()
betahatmatSclaudio=matrix(0,nrow=nrep,ncol=length(fixeff))
thetahatmatSclaudio=matrix(0,nrow=nrep,ncol=length(theta))
asympvarbetaSclaudio=list()
asympvarthetaSclaudio=list()
lbeta = length(fixeff)
ltheta = length(theta)
y=NULL
item=NULL
obs=NULL
Xdesign=NULL
for (i in 1:n){
itemnew=matrix(i,nrow=k,ncol=1)  # recording item index
obsnew=matrix(1:k,nrow=k,ncol=1) # vector of observation indices
# generating y=X*alpha+beta*Z+epsilon
ynew=X%*%fixeff+
rnorm(1,sd=sqrt(sigmabeta))*Z+
sqrt(sigmaeps)*mvrnorm(1,Sigma=varerror,mu=rep(0,times=k))
# stacking new y, item, obs, Xdesign to previous ones
y=rbind(y,ynew)
item=rbind(item,itemnew)
obs=rbind(obs,obsnew)
Xdesign=rbind(Xdesign,X)
}
# dataframe with n observations (y,X) in dimension kx(k*q)
simdata=data.frame(item=item,obs=obs,y=y,x1=Xdesign[,1],x2=Xdesign[,2])
XX = list()
for (i in (1:n)){
XX[[i]] <- X
}
Y=list()
for (i in 1:n){
Y[[i]]=simdata[,3][simdata[,1]==i]
}
Ymat=matrix(0,n,k)
for (i in (1:n)){Ymat[i,] = Y[[i]]}
Zmat=Z
Roblme(Ymat,XX,Zmat,E=NULL,L=Llist,
rho="biweight",rhoMM=NULL,eps=1e-5,maxiter=100,eff=0.95,V0=NULL)
summaryS = tryCatch(
expr  = {est0 =Roblme(Ymat,XX,Zmat,E=NULL,L=Llist,
rho="biweight",rhoMM=NULL,eps=1e-5,maxiter=100,eff=0.95,V0=NULL)}, error  =  function(cond) {
fixedeffectsS = matrix(rep(NA,lbeta*4),lbeta,4)
fixedeffectsMM = matrix(rep(NA,lbeta*4),lbeta,4)
summarythetaS = matrix(rep(NA,ltheta*ltheta),ltheta,ltheta)
varbetaShat = matrix(rep(NA,lbeta*lbeta),lbeta,lbeta)
varbetaMMhat = matrix(rep(NA,lbeta*lbeta),lbeta,lbeta)
varthetahat = matrix(rep(NA,ltheta*ltheta),ltheta,ltheta)
w= rep(NA,n)
dis=rep(NA,n)
iterS =NA
iterM =NA
list(fixedeffectsS=fixedeffectsS,fixedeffectsMM=fixedeffectsMM,summarythetaS=summarythetaS,varbetaShat=varbetaShat,
varbetaMMhat=varbetaMMhat,varthetahat=varthetahat,
w=w,dis=dis,iterS=iterS,iterM=iterM)})
n_suj=n #nb of cases
n_mes=k #nb maximum number of measurements per case
J=n_mes
time<-as.numeric(rep(X[,2],n_suj))
id<-sort(as.numeric(rep(1:n_suj,n_mes)))
n_obs = n_suj*n_mes #nb of rows
groups <- cbind(rep(1:J, each=n),rep((1:n), J))
z1 = rep(1, J) #
rep(1, J)
Z
z1=Z
K <- list() # the "varcov" object
K[[1]] <- tcrossprod(z1,z1) # Matrix for intercept
#K[[2]] <- tcrossprod(z2,z2) # Matrix for time variable
#K[[3]] <- tcrossprod(z1,z2) + tcrossprod(z2,z1) # Matrix of interaction Intercept by time variable
#names(K) = c("sigma2_Intercept", "sigma2_Time", "Covariance")
names(K) = c("sigma2_Intercept")
K <<- K
y=vec(t(Ymat))
Dataset=data.frame(y,time,groups)
summarySclaudio=tryCatch(
expr  = {est0 =varComprob(y ~ 1 +  time, groups = groups, data = Dataset, varcov = K, control = varComprob.control(lower = c(0, 0, -Inf),method = "S", psi = "bisquare")) }, error  =  function(cond) {
beta = rep(NA,lbeta)
eta = rep(NA,3)
vcov.beta = matrix(rep(NA,lbeta*lbeta),lbeta,lbeta)
eta0 = NA
list(beta=beta,eta=eta,vcov.beta=vcov.beta,eta0=eta0)})
summarySclaudio
y
time
groups
varComprob(y ~ 1 +  time, groups = groups, data = Dataset, varcov = K, control = varComprob.control(lower = c(0, 0, -Inf),method = "S", psi = "bisquare"))
dim(time)
length(time)
length(y)
length(groups)
groups
K
varComprob(y ~ 1 +  time, groups = groups, data = Dataset, varcov = K, control = varComprob.control(lower = c(0, 0, -Inf),method = "S", psi = "bisquare"))
Roblme(Ymat,XX,Zmat,E=NULL,L=Llist,
rho="biweight",rhoMM=NULL,eps=1e-5,maxiter=100,eff=0.95,V0=NULL)
set.seed(123)
# Diagonal variances of measurement covariance
#varerror=diag(rep(1,4))   # setting in Copt & Victoria-Feser (2006)
# THIS SETTING GIVES DIFFERENCES IN COVARIANCE OF THETAHAT
# BUT ITERATIONS RUN OUT OF BOUNDS
varerror=diag(runif(k))
#varerror=diag(c(1,4,9,16))
#varerror=cbind(c(1,r,r^2,r^3),c(r,1,r,r^2),c(r^2,r,1,r),c(r^3,r^2,r,1))
# construction design matrix X=[1 x], such that X^TX=4*I
X=cbind(1,rnorm(k))
X=cbind(1,data_sphe(X)) # setting in Copt & Victoria-Feser (2006)
#X=as.matrix(cbind(1:4,rnorm(4)))
# Setting for design matrix random effects
#Z=rep(1,times=k)   # setting in Copt & Victoria-Feser (2006)
Z=1:4               # THIS SETTING GIVES DIFFERENCES IN COVRIANCE OF BETAHAT
# matrices L in V=sigmabeta*L1+sigmaeps*L2
L1=Z%*%t(Z)       # covariance part due to random effect
L2=varerror       # covariance part due to measurement error
Vtheta=theta[1]*L1+theta[2]*L2
L=as.matrix(cbind(vec(L1),vec(L2)))
Llist=list()
Llist[[1]]=L1
Llist[[2]]=L2
# Asymptotic variances betahat
# Expression from our theory
varbeta=constbetahat(k,c0)*
solve(t(X)%*%solve(Vtheta)%*%X)
# Expression from Copt & Victoria-Feser (2006)
varbetaCopt=constbetahat(k,c0)*
solve(t(X)%*%X) %*% t(X) %*% Vtheta %*% X %*% solve(t(X)%*%X)
# Asymptotic variances thetahat
# Expression from our theory
vartheta=(2*sigma1(k,c0)*
solve(t(L)%*%(solve(Vtheta)%x%solve(Vtheta))%*%L)+
sigma2(k,c0)*theta%*%t(theta))
# Expression from Copt & Victoria-Feser (2006)
varthetaCopt=2*sigma1(k,c0)*
solve((t(L)%*%L))%*%t(L)%*%(Vtheta%x%Vtheta)%*%L%*%solve((t(L)%*%L))+
sigma2(k,c0)*theta%*%t(theta)
###################################################################
# setting up iterations for the simulation
nrep=10000
betahat=matrix(0,nrow=nrep,ncol = length(fixeff))   # matrix for nrep rows of betahat's with biweight
thetahat=matrix(0,nrow=nrep,ncol = length(theta))   # matrix for nrep rows of thetahat's with biweight
MDscale=matrix(0,nrow=nrep,ncol = 1)                # vector for nrep values of scaling
MDscalenew=matrix(0,nrow=nrep,ncol = 1)                # vector for nrep values of scaling
betahatmatS=matrix(0,nrow=nrep,ncol=length(fixeff))
thetahatmatS=matrix(0,nrow=nrep,ncol=length(theta))
asympvarbetaS=list()
asympvarthetaS=list()
betahatmatSclaudio=matrix(0,nrow=nrep,ncol=length(fixeff))
thetahatmatSclaudio=matrix(0,nrow=nrep,ncol=length(theta))
asympvarbetaSclaudio=list()
asympvarthetaSclaudio=list()
lbeta = length(fixeff)
ltheta = length(theta)
y=NULL
item=NULL
obs=NULL
Xdesign=NULL
for (i in 1:n){
itemnew=matrix(i,nrow=k,ncol=1)  # recording item index
obsnew=matrix(1:k,nrow=k,ncol=1) # vector of observation indices
# generating y=X*alpha+beta*Z+epsilon
ynew=X%*%fixeff+
rnorm(1,sd=sqrt(sigmabeta))*Z+
sqrt(sigmaeps)*mvrnorm(1,Sigma=varerror,mu=rep(0,times=k))
# stacking new y, item, obs, Xdesign to previous ones
y=rbind(y,ynew)
item=rbind(item,itemnew)
obs=rbind(obs,obsnew)
Xdesign=rbind(Xdesign,X)
}
# dataframe with n observations (y,X) in dimension kx(k*q)
simdata=data.frame(item=item,obs=obs,y=y,x1=Xdesign[,1],x2=Xdesign[,2])
XX = list()
for (i in (1:n)){
XX[[i]] <- X
}
Y=list()
for (i in 1:n){
Y[[i]]=simdata[,3][simdata[,1]==i]
}
Ymat=matrix(0,n,k)
for (i in (1:n)){Ymat[i,] = Y[[i]]}
Zmat=Z
summaryS = tryCatch(
expr  = {est0 =Roblme(Ymat,XX,Zmat,E=NULL,L=Llist,
rho="biweight",rhoMM=NULL,eps=1e-5,maxiter=100,eff=0.95,V0=NULL)}, error  =  function(cond) {
fixedeffectsS = matrix(rep(NA,lbeta*4),lbeta,4)
fixedeffectsMM = matrix(rep(NA,lbeta*4),lbeta,4)
summarythetaS = matrix(rep(NA,ltheta*ltheta),ltheta,ltheta)
varbetaShat = matrix(rep(NA,lbeta*lbeta),lbeta,lbeta)
varbetaMMhat = matrix(rep(NA,lbeta*lbeta),lbeta,lbeta)
varthetahat = matrix(rep(NA,ltheta*ltheta),ltheta,ltheta)
w= rep(NA,n)
dis=rep(NA,n)
iterS =NA
iterM =NA
list(fixedeffectsS=fixedeffectsS,fixedeffectsMM=fixedeffectsMM,summarythetaS=summarythetaS,varbetaShat=varbetaShat,
varbetaMMhat=varbetaMMhat,varthetahat=varthetahat,
w=w,dis=dis,iterS=iterS,iterM=iterM)})
n_suj=n #nb of cases
n_mes=k #nb maximum number of measurements per case
J=n_mes
time<-as.numeric(rep(X[,2],n_suj))
id<-sort(as.numeric(rep(1:n_suj,n_mes)))
n_obs = n_suj*n_mes #nb of rows
groups <- cbind(rep(1:J, each=n),rep((1:n), J)) # a numeric matrix with two columns used to group the observations according to participant.
# Build the argument "varcov" of the varComprob() function
#z1 = rep(1, J) #Value for intercept (=1) for the J observations by clusters
#z2 = unique(time) # Value for the time variable
z1=Z
K <- list() # the "varcov" object
K[[1]] <- tcrossprod(z1,z1) # Matrix for intercept
#K[[2]] <- tcrossprod(z2,z2) # Matrix for time variable
#K[[3]] <- tcrossprod(z1,z2) + tcrossprod(z2,z1) # Matrix of interaction Intercept by time variable
#names(K) = c("sigma2_Intercept", "sigma2_Time", "Covariance")
names(K) = c("sigma2_Intercept")
K <<- K
y=vec(t(Ymat))
Dataset=data.frame(y,time,groups)
summarySclaudio=tryCatch(
expr  = {est0 =varComprob(y ~ 1 +  time, groups = groups, data = Dataset, varcov = K, control = varComprob.control(lower = c(0, 0, -Inf),method = "S", psi = "bisquare")) }, error  =  function(cond) {
beta = rep(NA,lbeta)
eta = rep(NA,3)
vcov.beta = matrix(rep(NA,lbeta*lbeta),lbeta,lbeta)
eta0 = NA
list(beta=beta,eta=eta,vcov.beta=vcov.beta,eta0=eta0)})
varComprob(y ~ 1 +  time, groups = groups, data = Dataset, varcov = K, control = varComprob.control(lower = c(0, 0, -Inf),method = "S", psi = "bisquare"))
Roblme(Ymat,XX,Zmat,E=NULL,L=Llist,
rho="biweight",rhoMM=NULL,eps=1e-5,maxiter=100,eff=0.95,V0=NULL)
varerror=diag(c(1,4,9,16))
#varerror=cbind(c(1,r,r^2,r^3),c(r,1,r,r^2),c(r^2,r,1,r),c(r^3,r^2,r,1))
# construction design matrix X=[1 x], such that X^TX=4*I
X=cbind(1,rnorm(k))
X=cbind(1,data_sphe(X)) # setting in Copt & Victoria-Feser (2006)
#X=as.matrix(cbind(1:4,rnorm(4)))
# Setting for design matrix random effects
Z=rep(1,times=k)   # setting in Copt & Victoria-Feser (2006)
#Z=1:4               # THIS SETTING GIVES DIFFERENCES IN COVRIANCE OF BETAHAT
# matrices L in V=sigmabeta*L1+sigmaeps*L2
L1=Z%*%t(Z)       # covariance part due to random effect
L2=varerror       # covariance part due to measurement error
Vtheta=theta[1]*L1+theta[2]*L2
L=as.matrix(cbind(vec(L1),vec(L2)))
Llist=list()
Llist[[1]]=L1
Llist[[2]]=L2
# Asymptotic variances betahat
# Expression from our theory
varbeta=constbetahat(k,c0)*
solve(t(X)%*%solve(Vtheta)%*%X)
# Expression from Copt & Victoria-Feser (2006)
varbetaCopt=constbetahat(k,c0)*
solve(t(X)%*%X) %*% t(X) %*% Vtheta %*% X %*% solve(t(X)%*%X)
# Asymptotic variances thetahat
# Expression from our theory
vartheta=(2*sigma1(k,c0)*
solve(t(L)%*%(solve(Vtheta)%x%solve(Vtheta))%*%L)+
sigma2(k,c0)*theta%*%t(theta))
# Expression from Copt & Victoria-Feser (2006)
varthetaCopt=2*sigma1(k,c0)*
solve((t(L)%*%L))%*%t(L)%*%(Vtheta%x%Vtheta)%*%L%*%solve((t(L)%*%L))+
sigma2(k,c0)*theta%*%t(theta)
###################################################################
# setting up iterations for the simulation
nrep=10000
betahat=matrix(0,nrow=nrep,ncol = length(fixeff))   # matrix for nrep rows of betahat's with biweight
thetahat=matrix(0,nrow=nrep,ncol = length(theta))   # matrix for nrep rows of thetahat's with biweight
MDscale=matrix(0,nrow=nrep,ncol = 1)                # vector for nrep values of scaling
MDscalenew=matrix(0,nrow=nrep,ncol = 1)                # vector for nrep values of scaling
betahatmatS=matrix(0,nrow=nrep,ncol=length(fixeff))
thetahatmatS=matrix(0,nrow=nrep,ncol=length(theta))
asympvarbetaS=list()
asympvarthetaS=list()
betahatmatSclaudio=matrix(0,nrow=nrep,ncol=length(fixeff))
thetahatmatSclaudio=matrix(0,nrow=nrep,ncol=length(theta))
asympvarbetaSclaudio=list()
asympvarthetaSclaudio=list()
lbeta = length(fixeff)
ltheta = length(theta)
y=NULL
item=NULL
obs=NULL
Xdesign=NULL
for (i in 1:n){
itemnew=matrix(i,nrow=k,ncol=1)  # recording item index
obsnew=matrix(1:k,nrow=k,ncol=1) # vector of observation indices
# generating y=X*alpha+beta*Z+epsilon
ynew=X%*%fixeff+
rnorm(1,sd=sqrt(sigmabeta))*Z+
sqrt(sigmaeps)*mvrnorm(1,Sigma=varerror,mu=rep(0,times=k))
# stacking new y, item, obs, Xdesign to previous ones
y=rbind(y,ynew)
item=rbind(item,itemnew)
obs=rbind(obs,obsnew)
Xdesign=rbind(Xdesign,X)
}
# dataframe with n observations (y,X) in dimension kx(k*q)
simdata=data.frame(item=item,obs=obs,y=y,x1=Xdesign[,1],x2=Xdesign[,2])
XX = list()
for (i in (1:n)){
XX[[i]] <- X
}
Y=list()
for (i in 1:n){
Y[[i]]=simdata[,3][simdata[,1]==i]
}
Ymat=matrix(0,n,k)
for (i in (1:n)){Ymat[i,] = Y[[i]]}
Zmat=Z
Roblme(Ymat,XX,Zmat,E=NULL,L=Llist,
rho="biweight",rhoMM=NULL,eps=1e-5,maxiter=100,eff=0.95,V0=NULL)
n_suj=n #nb of cases
n_mes=k #nb maximum number of measurements per case
J=n_mes
time<-as.numeric(rep(X[,2],n_suj))
id<-sort(as.numeric(rep(1:n_suj,n_mes)))
n_obs = n_suj*n_mes #nb of rows
groups <- cbind(rep(1:J, each=n),rep((1:n), J)) # a numeric matrix with two columns used to group the observations according to participant.
# Build the argument "varcov" of the varComprob() function
#z1 = rep(1, J) #Value for intercept (=1) for the J observations by clusters
#z2 = unique(time) # Value for the time variable
z1=Z
K <- list() # the "varcov" object
K[[1]] <- tcrossprod(z1,z1) # Matrix for intercept
#K[[2]] <- tcrossprod(z2,z2) # Matrix for time variable
#K[[3]] <- tcrossprod(z1,z2) + tcrossprod(z2,z1) # Matrix of interaction Intercept by time variable
#names(K) = c("sigma2_Intercept", "sigma2_Time", "Covariance")
names(K) = c("sigma2_Intercept")
K <<- K
y=vec(t(Ymat))
Dataset=data.frame(y,time,groups)
L1
K[[1]]
z1 = rep(1, J) #Value for intercept (=1) for the J observations by clusters
z2 = unique(time) # Value for the time variable
#z1=Z
K <- list() # the "varcov" object
K[[1]] <- tcrossprod(z1,z1) # Matrix for intercept
K[[2]] <- tcrossprod(z2,z2) # Matrix for time variable
K[[3]] <- tcrossprod(z1,z2) + tcrossprod(z2,z1) # Matrix of interaction Intercept by time variable
names(K) = c("sigma2_Intercept", "sigma2_Time", "Covariance")
#names(K) = c("sigma2_Intercept")
K <<- K
y=vec(t(Ymat))
Dataset=data.frame(y,time,groups)
varComprob(y ~ 1 +  time, groups = groups, data = Dataset, varcov = K, control = varComprob.control(lower = c(0, 0, -Inf),method = "S", psi = "bisquare"))
Zmat=Z
summaryS = tryCatch(
expr  = {est0 =Roblme(Ymat,XX,Zmat,E=NULL,L=Llist,
rho="biweight",rhoMM=NULL,eps=1e-5,maxiter=100,eff=0.95,V0=NULL)}, error  =  function(cond) {
fixedeffectsS = matrix(rep(NA,lbeta*4),lbeta,4)
fixedeffectsMM = matrix(rep(NA,lbeta*4),lbeta,4)
summarythetaS = matrix(rep(NA,ltheta*ltheta),ltheta,ltheta)
varbetaShat = matrix(rep(NA,lbeta*lbeta),lbeta,lbeta)
varbetaMMhat = matrix(rep(NA,lbeta*lbeta),lbeta,lbeta)
varthetahat = matrix(rep(NA,ltheta*ltheta),ltheta,ltheta)
w= rep(NA,n)
dis=rep(NA,n)
iterS =NA
iterM =NA
list(fixedeffectsS=fixedeffectsS,fixedeffectsMM=fixedeffectsMM,summarythetaS=summarythetaS,varbetaShat=varbetaShat,
varbetaMMhat=varbetaMMhat,varthetahat=varthetahat,
w=w,dis=dis,iterS=iterS,iterM=iterM)})
n_suj=n #nb of cases
n_mes=k #nb maximum number of measurements per case
J=n_mes
time<-as.numeric(rep(X[,2],n_suj))
id<-sort(as.numeric(rep(1:n_suj,n_mes)))
n_obs = n_suj*n_mes #nb of rows
groups <- cbind(rep(1:J, each=n),rep((1:n), J)) # a numeric matrix with two columns used to group the observations according to participant.
# Build the argument "varcov" of the varComprob() function
z1 = rep(1, J) #Value for intercept (=1) for the J observations by clusters
z2 = unique(time) # Value for the time variable
#z1=Z
K <- list() # the "varcov" object
K[[1]] <- tcrossprod(z1,z1) # Matrix for intercept
K[[2]] <- tcrossprod(z2,z2) # Matrix for time variable
K[[3]] <- tcrossprod(z1,z2) + tcrossprod(z2,z1) # Matrix of interaction Intercept by time variable
names(K) = c("sigma2_Intercept", "sigma2_Time", "Covariance")
#names(K) = c("sigma2_Intercept")
K <<- K
y=vec(t(Ymat))
Dataset=data.frame(y,time,groups)
summarySclaudio=tryCatch(
expr  = {est0 =varComprob(y ~ 1 +  time, groups = groups, data = Dataset, varcov = K, control = varComprob.control(lower = c(0, 0, -Inf),method = "S", psi = "bisquare")) }, error  =  function(cond) {
beta = rep(NA,lbeta)
eta = rep(NA,3)
vcov.beta = matrix(rep(NA,lbeta*lbeta),lbeta,lbeta)
eta0 = NA
list(beta=beta,eta=eta,vcov.beta=vcov.beta,eta0=eta0)})
betahatmatS[m,]=summaryS$fixedeffectsS[,1]
m1
betahatmatS[m,]=summaryS$fixedeffectsS[,1]
m=1
betahatmatS[m,]=summaryS$fixedeffectsS[,1]
thetahatmatS[m,]=summaryS$summarythetaS[,1]
asympvarbetaS[[m]]=summaryS$varbetaShat
asympvarthetaS[[m]]=summaryS$varthetahat
betahatmatSclaudio[m,]=summarySclaudio$beta
thetahatmatSclaudio[m,]=c(summarySclaudio$eta[1],summarySclaudio$eta[3],summarySclaudio$eta[2],summarySclaudio$eta0)
betahatmatS[m,]
thetahatmatS[m,]
asympvarbetaS[[m]]
asympvarthetaS[[m]]
betahatmatSclaudio[m,]
thetahatmatSclaudio[m,]
asympvarbetaSclaudio[[m]]
summarySclaudio$vcov.beta
c(summarySclaudio$eta[1],summarySclaudio$eta[3],summarySclaudio$eta[2],summarySclaudio$eta0)
thetahatmatSclaudio[m,]
thetahatmatS[m,]
summarySclaudio$vcov.beta
summaryS$varbetaShat
asympvarbetaSclaudio[[m]]=summarySclaudio$vcov.bet
asympvarbetaSclaudio[[m]]
varComprob(y ~ 1 +  time, groups = groups, data = Dataset, varcov = Z, control = varComprob.control(lower = c(0, 0, -Inf),method = "S", psi = "bisquare"))
ZList=Z
varComprob(y ~ 1 +  time, groups = groups, data = Dataset, varcov = ZList, control = varComprob.control(lower = c(0, 0, -Inf),method = "S", psi = "bisquare"))
summarySclaudio=tryCatch(
expr  = {est0 =varComprob(y ~ 1 +  time, groups = groups, data = Dataset, varcov = K, control = varComprob.control(lower = c(0, 0, -Inf),method = "S", psi = "bisquare")) }, error  =  function(cond) {
beta = rep(NA,lbeta)
eta = rep(NA,3)
vcov.beta = matrix(rep(NA,lbeta*lbeta),lbeta,lbeta)
eta0 = NA
list(beta=beta,eta=eta,vcov.beta=vcov.beta,eta0=eta0)})
thetahatmatS[m,]
thetahatmatSclaudio[m,]
c(summarySclaudio$eta[1],summarySclaudio$eta[3],summarySclaudio$eta[2],summarySclaudio$eta0)
summarySclaudio$vcov.beta
z1 = rep(1, J) #Value for intercept (=1) for the J observations by clusters
#z2 = unique(time) # Value for the time variable
#z1=Z
K <- list() # the "varcov" object
K[[1]] <- tcrossprod(z1,z1) # Matrix for intercept
#K[[2]] <- tcrossprod(z2,z2) # Matrix for time variable
#K[[3]] <- tcrossprod(z1,z2) + tcrossprod(z2,z1) # Matrix of interaction Intercept by time variable
#names(K) = c("sigma2_Intercept", "sigma2_Time", "Covariance")
names(K) = c("sigma2_Intercept")
K <<- K
y=vec(t(Ymat))
Dataset=data.frame(y,time,groups)
varComprob(y ~ 1 +  time, groups = groups, data = Dataset, varcov = K, control = varComprob.control(lower = c(0, 0, -Inf),method = "S", psi = "bisquare"))
