flname=paste0("./Results_Random_Effect_contamination/","MLESMMcTAU","_",
"nrep=",nrep,"_",
"n=",nsample,"_",
"k=",ksample,"_",
"pe=",pesample,"_",
"pb=",pbsample,"_",
"px=",pxsample,"_",
"mec=",mecsample,"_",
"mbc2=",mbc2sample,"_",
"alphac=",alphacsample,"_",
".RData")}
if (px>0){
flname=paste0("./Results_X_contamination/","MLESMMcTAU","_",
"nrep=",nrep,"_",
"n=",nsample,"_",
"k=",ksample,"_",
"pe=",pesample,"_",
"pb=",pbsample,"_",
"px=",pxsample,"_",
"mec=",mecsample,"_",
"mbc2=",mbc2sample,"_",
"alphac=",alphacsample,"_",
".RData")}
save(MLESMMcTAU,file=flname)
}
scenarios
source("biweight_functions.R")
source("asympt_norm_constants.R")
source("function_data_gen_MCG.R")
source("Robust_lme.R")
source("function_MLESMMcTAU_estimates_MCG.R")
library(robustbase)
library(lava)
# Information for ourselves
# beta=c(250,10)
# beta1=gamma0
# beta2=gamma1
# theta=c(790,-8.5,40,400)
# theta1=sigma0^2
# theta2=sigma10
# theta3=sigma1^2
# theta4=sigmaeps^2
pe=0.05
pb=0.05
px=0.05
nrep=1
# creating a dataframe that contains different contamination schemes
# as rows
scenarios=NULL
scenarios=rbind(scenarios,c(nrep,200,4,pe,0,0,-80,0,1))
scenarios=rbind(scenarios,c(nrep,200,4,0,pb,0,0,-25,1))
scenarios=rbind(scenarios,c(nrep,200,4,0,0,px,0,0,10))
colnames(scenarios)=c("nrep","n","k","pe","pb","px","mec","mbc2","alphac")
scenarios=data.frame(scenarios)
set.seed(11131957)
for (i in (1:nrow(scenarios))){
nrep=scenarios[i,1]
nsample=scenarios[i,2]
ksample=scenarios[i,3]
pesample=scenarios[i,4]
pbsample=scenarios[i,5]
pxsample=scenarios[i,6]
mecsample=scenarios[i,7]
mbc2sample=scenarios[i,8]
alphacsample=scenarios[i,9]
MLESMMcTAU=MLESMMcTAU_estimates_MCG(nrep=nrep,n=nsample,k=ksample,
pe=pesample,pb=pbsample,px=pxsample,
mec=mecsample,mbc2=mbc2sample,
alphac=alphacsample)
if (pe>0){
flname=paste0("./Results_Epsilon_contamination/","MLESMMcTAU","_",
"nrep=",nrep,"_",
"n=",nsample,"_",
"k=",ksample,"_",
"pe=",pesample,"_",
"pb=",pbsample,"_",
"px=",pxsample,"_",
"mec=",mecsample,"_",
"mbc2=",mbc2sample,"_",
"alphac=",alphacsample,"_",
".RData")}else{
flname=paste0("./Results_Uncontaminated/","MLESMMcTAU","_",
"nrep=",nrep,"_",
"n=",nsample,"_",
"k=",ksample,"_",
"pe=",pesample,"_",
"pb=",pbsample,"_",
"px=",pxsample,"_",
"mec=",mecsample,"_",
"mbc2=",mbc2sample,"_",
"alphac=",alphacsample,"_",
".RData")}
if (pb>0){
flname=paste0("./Results_Random_Effect_contamination/","MLESMMcTAU","_",
"nrep=",nrep,"_",
"n=",nsample,"_",
"k=",ksample,"_",
"pe=",pesample,"_",
"pb=",pbsample,"_",
"px=",pxsample,"_",
"mec=",mecsample,"_",
"mbc2=",mbc2sample,"_",
"alphac=",alphacsample,"_",
".RData")}
if (px>0){
flname=paste0("./Results_X_contamination/","MLESMMcTAU","_",
"nrep=",nrep,"_",
"n=",nsample,"_",
"k=",ksample,"_",
"pe=",pesample,"_",
"pb=",pbsample,"_",
"px=",pxsample,"_",
"mec=",mecsample,"_",
"mbc2=",mbc2sample,"_",
"alphac=",alphacsample,"_",
".RData")}
save(MLESMMcTAU,file=flname)
}
source("biweight_functions.R")
source("asympt_norm_constants.R")
source("function_data_gen_MCG_contCCM.R")
source("Robust_lme.R")
source("function_MLESMM_estimates_MCG_contCCM.R")
library(robustbase)
# Information for ourselves
# beta=c(250,10)
# beta1=gamma0
# beta2=gamma1
# theta=c(790,-8.5,40,400)
# theta1=sigma0^2
# theta2=sigma10
# theta3=sigma1^2
# theta4=sigmaeps^2
pe=0.05
pb=0.05
px=0.05
nrep=2
# creating a dataframe that contains different contamination schemes
# as rows
scenarios=NULL
scenarios=rbind(scenarios,c(nrep,200,4,pe,0,0,-80,0,1,0))
scenarios=rbind(scenarios,c(nrep,200,4,0,pb,0,0,-25,1,0))
scenarios=rbind(scenarios,c(nrep,200,4,0,0,px,0,0,10,0))
scenarios=rbind(scenarios,c(nrep,200,4,pe,0,0,-80,0,1,1))
scenarios=rbind(scenarios,c(nrep,200,4,0,pb,0,0,-25,1,1))
scenarios=rbind(scenarios,c(nrep,200,4,0,0,px,0,0,10,1))
colnames(scenarios)=c("nrep","n","k","pe","pb","px","mec","mbc2","alphac","no")
set.seed(11131957)
for (i in (1:nrow(scenarios))){
nrep=scenarios[i,1]
nsample=scenarios[i,2]
ksample=scenarios[i,3]
pesample=scenarios[i,4]
pbsample=scenarios[i,5]
pxsample=scenarios[i,6]
mecsample=scenarios[i,7]
mbc2sample=scenarios[i,8]
alphacsample=scenarios[i,9]
nosample=scenarios[i,10]
MLESMM_CCM=MLESMM_estimates_MCG_contCCM(nrep=nrep,n=nsample,k=ksample,
pe=pesample,pb=pbsample,px=pxsample,
mec=mecsample,mbc2=mbc2sample,
alphac=alphacsample,no=nosample)
if (pe>0){
flname=paste0("./Results_Epsilon_contamination/EpsilonCCM/","MLESMM_CCM","_",
"nrep=",nrep,"_",
"n=",nsample,"_",
"k=",ksample,"_",
"pe=",pesample,"_",
"pb=",pbsample,"_",
"px=",pxsample,"_",
"mec=",mecsample,"_",
"mbc2=",mbc2sample,"_",
"alphac=",alphacsample,"_",
"no=",nosample,
".RData")}else{
flname=paste0("./Results_Uncontaminated/EpsilonCCM/","MLESMM_CCM","_",
"nrep=",nrep,"_",
"n=",nsample,"_",
"k=",ksample,"_",
"pe=",pesample,"_",
"pb=",pbsample,"_",
"px=",pxsample,"_",
"mec=",mecsample,"_",
"mbc2=",mbc2sample,"_",
"alphac=",alphacsample,"_",
"no=",nosample,
".RData")}
if (pb>0){
flname=paste0("./Results_Random_Effect_contamination/RandomEffectCCM/","MLESMM_CCM","_",
"nrep=",nrep,"_",
"n=",nsample,"_",
"k=",ksample,"_",
"pe=",pesample,"_",
"pb=",pbsample,"_",
"px=",pxsample,"_",
"mec=",mecsample,"_",
"mbc2=",mbc2sample,"_",
"alphac=",alphacsample,"_",
"no=",nosample,
".RData")}
if (px>0){
flname=paste0("./Results_X_contamination/XCCM/","MLESMM_CCM","_",
"nrep=",nrep,"_",
"n=",nsample,"_",
"k=",ksample,"_",
"pe=",pesample,"_",
"pb=",pbsample,"_",
"px=",pxsample,"_",
"mec=",mecsample,"_",
"mbc2=",mbc2sample,"_",
"alphac=",alphacsample,"_",
"no=",nosample,
".RData")}
save(MLESMM_CCM,file=flname)
}
scenarios=NULL
scenarios=rbind(scenarios,c(nrep,200,4,pe,0,0,-80,0,1,0))
scenarios=rbind(scenarios,c(nrep,200,4,0,pb,0,0,-25,1,0))
scenarios=rbind(scenarios,c(nrep,200,4,0,0,px,0,0,10,0))
scenarios=rbind(scenarios,c(nrep,200,4,pe,0,0,-80,0,1,1))
scenarios=rbind(scenarios,c(nrep,200,4,0,pb,0,0,-25,1,1))
scenarios=rbind(scenarios,c(nrep,200,4,0,0,px,0,0,10,1))
colnames(scenarios)=c("nrep","n","k","pe","pb","px","mec","mbc2","alphac","no")
scenarios
source("biweight_functions.R")
source("asympt_norm_constants.R")
source("function_data_gen_MCG_contCCM.R")
source("Robust_lme.R")
source("function_MLESMMcTAU_estimates_MCG_contCCM.R")
library(robustbase)
# Information for ourselves
# beta=c(250,10)
# beta1=gamma0
# beta2=gamma1
# theta=c(790,-8.5,40,400)
# theta1=sigma0^2
# theta2=sigma10
# theta3=sigma1^2
# theta4=sigmaeps^2
pe=0.05
pb=0.05
px=0.05
nrep=2
# creating a dataframe that contains different contamination schemes
# as rows
scenarios=NULL
scenarios=rbind(scenarios,c(nrep,200,4,pe,0,0,-80,0,1,0))
scenarios=rbind(scenarios,c(nrep,200,4,0,pb,0,0,-25,1,0))
scenarios=rbind(scenarios,c(nrep,200,4,0,0,px,0,0,10,0))
scenarios=rbind(scenarios,c(nrep,200,4,pe,0,0,-80,0,1,1))
scenarios=rbind(scenarios,c(nrep,200,4,0,pb,0,0,-25,1,1))
scenarios=rbind(scenarios,c(nrep,200,4,0,0,px,0,0,10,1))
colnames(scenarios)=c("nrep","n","k","pe","pb","px","mec","mbc2","alphac","no")
set.seed(11131957)
for (i in (1:nrow(scenarios))){
nrep=scenarios[i,1]
nsample=scenarios[i,2]
ksample=scenarios[i,3]
pesample=scenarios[i,4]
pbsample=scenarios[i,5]
pxsample=scenarios[i,6]
mecsample=scenarios[i,7]
mbc2sample=scenarios[i,8]
alphacsample=scenarios[i,9]
nosample=scenarios[i,10]
MLESMMcTAU_CCM=MLESMMcTAU_estimates_MCG_contCCM(nrep=nrep,n=nsample,k=ksample,
pe=pesample,pb=pbsample,px=pxsample,
mec=mecsample,mbc2=mbc2sample,
alphac=alphacsample,no=nosample)
if (pe>0){
flname=paste0("./Results_Epsilon_contamination/EpsilonCCM/","MLESMMcTAU_CCM","_",
"nrep=",nrep,"_",
"n=",nsample,"_",
"k=",ksample,"_",
"pe=",pesample,"_",
"pb=",pbsample,"_",
"px=",pxsample,"_",
"mec=",mecsample,"_",
"mbc2=",mbc2sample,"_",
"alphac=",alphacsample,"_",
"no=",nosample,
".RData")}else{
flname=paste0("./Results_Uncontaminated/EpsilonCCM/","MLESMMcTAU_CCM","_",
"nrep=",nrep,"_",
"n=",nsample,"_",
"k=",ksample,"_",
"pe=",pesample,"_",
"pb=",pbsample,"_",
"px=",pxsample,"_",
"mec=",mecsample,"_",
"mbc2=",mbc2sample,"_",
"alphac=",alphacsample,"_",
"no=",nosample,
".RData")}
if (pb>0){
flname=paste0("./Results_Random_Effect_contamination/RandomEffectCCM/","MLESMMcTAU_CCM","_",
"nrep=",nrep,"_",
"n=",nsample,"_",
"k=",ksample,"_",
"pe=",pesample,"_",
"pb=",pbsample,"_",
"px=",pxsample,"_",
"mec=",mecsample,"_",
"mbc2=",mbc2sample,"_",
"alphac=",alphacsample,"_",
"no=",nosample,
".RData")}
if (px>0){
flname=paste0("./Results_X_contamination/XCCM/","MLESMMcTAU_CCM","_",
"nrep=",nrep,"_",
"n=",nsample,"_",
"k=",ksample,"_",
"pe=",pesample,"_",
"pb=",pbsample,"_",
"px=",pxsample,"_",
"mec=",mecsample,"_",
"mbc2=",mbc2sample,"_",
"alphac=",alphacsample,"_",
"no=",nosample,
".RData")}
save(MLESMMcTAU_CCM,file=flname)
}
scenarios
boxplotMLESMMcTAUbeta=NULL
boxplotMLESMMcTAUtheta=NULL
boxplotMLESMMcTAU_outlier=NULL
for (i in 1:nrow(scenarios)){
if (scenarios$pe[i]>0){
flname=paste0("./Results_Epsilon_contamination/","MLESMMcTAU","_",
#   flname=paste0("./Results_Epsilon_contamination/EpsilonCCM/","MLESMMcTAU","_",
"nrep=",scenarios$nrep[i],"_",
"n=",scenarios$n[i],"_",
"k=",scenarios$k[i],"_",
"pe=",scenarios$pe[i],"_",
"pb=",scenarios$pb[i],"_",
"px=",scenarios$px[i],"_",
"mec=",scenarios$mec[i],"_",
"mbc2=",scenarios$mbc2[i],"_",
"alphac=",scenarios$alphac[i],".RData")}else{
flname=paste0("./Results_Uncontaminated/","MLESMMcTAU","_",
"nrep=",scenarios$nrep[i],"_",
"n=",scenarios$n[i],"_",
"k=",scenarios$k[i],"_",
"pe=",scenarios$pe[i],"_",
"pb=",scenarios$pb[i],"_",
"px=",scenarios$px[i],"_",
"mec=",scenarios$mec[i],"_",
"mbc2=",scenarios$mbc2[i],"_",
"alphac=",scenarios$alphac[i],".RData")}
load(flname)
# combining the extracted information for boxplots
# for estimators for beta in a dataframe
# dataframe for MLE beta
boxplotMLEbeta=cbind(rep(1,times=nrep),
rep(scenarios$pe[i],times=nrep),
MLESMMcTAU$MLE$beta)
# dataframe for S beta
boxplotSbeta=cbind(rep(2,times=nrep),
rep(scenarios$pe[i],times=nrep),
MLESMMcTAU$S$beta)
# dataframe for MM beta
boxplotMMbeta=cbind(rep(3,times=nrep),
rep(scenarios$pe[i],times=nrep),
MLESMMcTAU$MM$beta)
# dataframe for cTAU beta
boxplotcTAUbeta=cbind(rep(4,times=nrep),
rep(scenarios$pe[i],times=nrep),
MLESMMcTAU$cTAU$beta)
# Combining all dataframes for beta in one.
# This dataframe can be uses as input for
# classical boxplots or ggplot2
boxplotMLESMMcTAUbeta=rbind(boxplotMLESMMcTAUbeta,
boxplotMLEbeta,
boxplotSbeta,boxplotMMbeta,boxplotcTAUbeta)
# dataframe for MLE theta
boxplotMLEtheta=cbind(rep(1,times=nrep),
rep(scenarios$pe[i],times=nrep),
MLESMMcTAU$MLE$theta)
# dataframe for S theta
boxplotStheta=cbind(rep(2,times=nrep),
rep(scenarios$pe[i],times=nrep),
MLESMMcTAU$S$theta)
# dataframe for cTAU theta
boxplotcTAUtheta=cbind(rep(4,times=nrep),
rep(scenarios$pe[i],times=nrep),
MLESMMcTAU$cTAU$theta)
# Combining all dataframes for theta in one.
# This dataframe can be uses as input for
# classical boxplots or ggplot2
boxplotMLESMMcTAUtheta=rbind(boxplotMLESMMcTAUtheta,
boxplotMLEtheta,
boxplotStheta,boxplotcTAUtheta)
# dataframe for number of outliers in i-th scenario
boxplotMLESMMcTAU_outlier_tmp=cbind(rep(n,nrep),
rep(scenarios$pe[i],times=nrep),
MLESMMcTAU$no_outliers)
# Combining with dataframes of previous scenarios
boxplotMLESMMcTAU_outlier=rbind(boxplotMLESMMcTAU_outlier,
boxplotMLESMMcTAU_outlier_tmp)
} # END of scenarios loop
###################################################################
# Setting the first two of boxplotMLESMMbeta columns to factors
colnames(boxplotMLESMMcTAUbeta)=c("Estimator","pe","beta1","beta2")
boxplotMLESMMcTAUbeta=data.frame(boxplotMLESMMcTAUbeta)
boxplotMLESMMcTAUbeta[,1]=factor(boxplotMLESMMcTAUbeta[,1],
levels=1:4,labels=c("MLE","S","MM","cTAU"))
boxplotMLESMMcTAUbeta[,2]=factor(boxplotMLESMMcTAUbeta[,2],levels=pevec,
labels = as.character(pevec*100))
# Setting the first two of boxplotMLESMMcTAUtheta columns to factors
colnames(boxplotMLESMMcTAUtheta)=c("Estimator","pe",
"theta1","theta2","theta3","theta4")
boxplotMLESMMcTAUtheta=data.frame(boxplotMLESMMcTAUtheta)
boxplotMLESMMcTAUtheta[,1]=factor(boxplotMLESMMcTAUtheta[,1],
levels=c(1:2,4),labels=c("MLE","S","cTAU"))
boxplotMLESMMcTAUtheta[,2]=factor(boxplotMLESMMcTAUtheta[,2],levels=pevec,
labels = as.character(pevec*100))
# Setting the first two of boxplotMLESMMcTAU_outlier columns to factors
colnames(boxplotMLESMMcTAU_outlier)=c("nsample","pe",
"nobi","noei","noxi","noe","nox")
boxplotMLESMMcTAU_outlier=data.frame(boxplotMLESMMcTAU_outlier)
boxplotMLESMMcTAU_outlier[,2]=factor(boxplotMLESMMcTAU_outlier[,2],levels=pevec,
labels = as.character(pevec*100))
boxplotMLESMMcTAUbeta=NULL
boxplotMLESMMcTAUtheta=NULL
boxplotMLESMMcTAU_outlier=NULL
for (i in 1:nrow(scenarios)){
if (scenarios$pe[i]>0){
flname=paste0("./Results_Epsilon_contamination/","MLESMMcTAU","_",
#   flname=paste0("./Results_Epsilon_contamination/EpsilonCCM/","MLESMMcTAU","_",
"nrep=",scenarios$nrep[i],"_",
"n=",scenarios$n[i],"_",
"k=",scenarios$k[i],"_",
"pe=",scenarios$pe[i],"_",
"pb=",scenarios$pb[i],"_",
"px=",scenarios$px[i],"_",
"mec=",scenarios$mec[i],"_",
"mbc2=",scenarios$mbc2[i],"_",
"alphac=",scenarios$alphac[i],".RData")}else{
flname=paste0("./Results_Uncontaminated/","MLESMMcTAU","_",
"nrep=",scenarios$nrep[i],"_",
"n=",scenarios$n[i],"_",
"k=",scenarios$k[i],"_",
"pe=",scenarios$pe[i],"_",
"pb=",scenarios$pb[i],"_",
"px=",scenarios$px[i],"_",
"mec=",scenarios$mec[i],"_",
"mbc2=",scenarios$mbc2[i],"_",
"alphac=",scenarios$alphac[i],".RData")}
load(flname)
# combining the extracted information for boxplots
# for estimators for beta in a dataframe
# dataframe for MLE beta
boxplotMLEbeta=cbind(rep(1,times=nrep),
rep(scenarios$pe[i],times=nrep),
MLESMMcTAU$MLE$beta)
# dataframe for S beta
boxplotSbeta=cbind(rep(2,times=nrep),
rep(scenarios$pe[i],times=nrep),
MLESMMcTAU$S$beta)
# dataframe for MM beta
boxplotMMbeta=cbind(rep(3,times=nrep),
rep(scenarios$pe[i],times=nrep),
MLESMMcTAU$MM$beta)
# dataframe for cTAU beta
boxplotcTAUbeta=cbind(rep(4,times=nrep),
rep(scenarios$pe[i],times=nrep),
MLESMMcTAU$cTAU$beta)
# Combining all dataframes for beta in one.
# This dataframe can be uses as input for
# classical boxplots or ggplot2
boxplotMLESMMcTAUbeta=rbind(boxplotMLESMMcTAUbeta,
boxplotMLEbeta,
boxplotSbeta,boxplotMMbeta,boxplotcTAUbeta)
# dataframe for MLE theta
boxplotMLEtheta=cbind(rep(1,times=nrep),
rep(scenarios$pe[i],times=nrep),
MLESMMcTAU$MLE$theta)
# dataframe for S theta
boxplotStheta=cbind(rep(2,times=nrep),
rep(scenarios$pe[i],times=nrep),
MLESMMcTAU$S$theta)
# dataframe for cTAU theta
boxplotcTAUtheta=cbind(rep(4,times=nrep),
rep(scenarios$pe[i],times=nrep),
MLESMMcTAU$cTAU$theta)
# Combining all dataframes for theta in one.
# This dataframe can be uses as input for
# classical boxplots or ggplot2
boxplotMLESMMcTAUtheta=rbind(boxplotMLESMMcTAUtheta,
boxplotMLEtheta,
boxplotStheta,boxplotcTAUtheta)
# dataframe for number of outliers in i-th scenario
boxplotMLESMMcTAU_outlier_tmp=cbind(rep(n,nrep),
rep(scenarios$pe[i],times=nrep),
MLESMMcTAU$no_outliers)
# Combining with dataframes of previous scenarios
boxplotMLESMMcTAU_outlier=rbind(boxplotMLESMMcTAU_outlier,
boxplotMLESMMcTAU_outlier_tmp)
} # END of scenarios loop
scenarios
MLESMMcTAU_CCM$MLE$beta
MLESMMcTAU_CCM$S$beta
MLESMMcTAU_CCM$cTAU$beta
MLESMMcTAU_CCM$MM$beta
MLESMMcTAU_CCM$MLE$theta
theta0
beta0
MLESMMcTAU_CCM$MLE$theta
MLESMMcTAU_CCM$S$theta
MLESMMcTAU_CCM$MM$theta
MLESMMcTAU_CCM$cTAU$theta
